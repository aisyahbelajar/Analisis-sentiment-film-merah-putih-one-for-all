# -*- coding: utf-8 -*-
"""with Decision Tree

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11J_7HwTxjR7G361CwZmLHDrcSTreo4sB

# Crawl Data Twitter
"""

import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

for fn in uploaded.keys():
    df = pd.read_csv(io.BytesIO(uploaded[fn]), encoding='latin-1')
    display(df.head())

"""Pre Processing Data"""

# Buat kolom clean_text
def clean_text(text):
    text = text.lower()  # jadi huruf kecil semua
    text = re.sub(r"http\S+|www\S+|https\S+", "", text)  # hapus URL
    text = re.sub(r"@\w+", "", text)  # hapus mention
    text = re.sub(r"#\w+", "", text)  # hapus hashtag
    text = re.sub(r"[^a-zA-Z\s]", "", text)  # hapus tanda baca & angka
    text = re.sub(r"\s+", " ", text).strip()  # hapus spasi berlebih
    return text

df['clean_text'] = df['full_text'].apply(clean_text)

# Cek hasilnya
df[['full_text', 'clean_text']].head()

"""Labeling Data BERT"""

from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline

# Load tokenizer dan model
tokenizer = AutoTokenizer.from_pretrained("nlptown/bert-base-multilingual-uncased-sentiment")
model = AutoModelForSequenceClassification.from_pretrained("nlptown/bert-base-multilingual-uncased-sentiment")

# Buat pipeline sentiment
sentiment_analyzer = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)

def bert_label(text):
    result = sentiment_analyzer(text)[0]  # result = {'label': '5 stars', 'score': 0.85}
    label = result['label']

    # Mapping ke 3 kelas sederhana: 0=negatif, 1=positif, 2=netral
    if label in ['1 star', '2 stars']:
        return 0  # negatif
    elif label == '3 stars':
        return 2  # netral
    else:
        return 1  # positif

df['sentiment'] = df['clean_text'].apply(bert_label)

df[['clean_text', 'sentiment']].head(10)

"""TF-IDF"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1,2), stop_words='english')
X = tfidf.fit_transform(df['clean_text'])
y = df['sentiment']

"""SMOTE"""

from imblearn.over_sampling import SMOTE

smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X, y)

"""Classification with Random Forest"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(max_depth=15, min_samples_leaf=5, random_state=42)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

print("Classification Report:")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

"""Visualization"""

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Negatif','Positif','Netral'],
            yticklabels=['Negatif','Positif','Netral'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

df['sentiment'].value_counts().plot(kind='bar', color=['red','green','blue'])
plt.title("Distribusi Sentimen")
plt.xlabel("Kelas")
plt.ylabel("Jumlah Tweet")
plt.show()

text = " ".join(df[df['sentiment']==1]['clean_text'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("Word Cloud - Positif")
plt.show()

text_neg = " ".join(df[df['sentiment']==0]['clean_text'])
wordcloud_neg = WordCloud(width=800, height=400, background_color='white').generate(text_neg)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud_neg, interpolation='bilinear')
plt.axis('off')
plt.title("Word Cloud - Negatif")
plt.show()

report_df = pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose()
report_df[['precision','recall','f1-score']].plot(kind='bar', figsize=(10,6))
plt.title("Performance Metrics per Class")
plt.show()